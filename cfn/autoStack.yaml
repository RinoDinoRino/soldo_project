AWSTemplateFormatVersion: 2010-09-09
Description: CloudFormation template for creating autpolicy reading.
Parameters:
  EmailSubscriber:
    Type: String
    Description: SNS Email subscriber
Resources:
  AUTOPOLICYROLE:
    Type: 'AWS::IAM::Role'
    Properties:
      Description: IAM Role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - events.amazonaws.com
                - lambda.amazonaws.com
                - s3.amazonaws.com
                - states.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      RoleName: quoteGeneratorRole
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSQSFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSNSFullAccess'
        - 'arn:aws:iam::aws:policy/AWSLambdaFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonTextractFullAccess'
        - 'arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess'
        - 'arn:aws:iam::aws:policy/CloudWatchFullAccess'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
  VINAPIDOWNQUEUE:
    Type: 'AWS::SQS::Queue'
    Properties:
      QueueName: vinApiDown
      VisibilityTimeout: 240
  INVALIDQUEUE:
    Type: 'AWS::SQS::Queue'
    Properties:
      QueueName: invalidQueue
      VisibilityTimeout: 240
  TEXTRACTDOWNQUEUE:
    Type: 'AWS::SQS::Queue'
    Properties:
      QueueName: textractDown
      VisibilityTimeout: 240
  INVALIDSNS:
    Type: 'AWS::SNS::Topic'
    Properties:
      DisplayName: invalidSNSdisplay
      Subscription:
        - Endpoint: !Ref EmailSubscriber
          Protocol: email
      TopicName: invalidSNS
  VALIDSNS:
    Type: 'AWS::SNS::Topic'
    Properties:
      DisplayName: validSNSdisplay
      Subscription:
        - Endpoint: !Ref EmailSubscriber
          Protocol: email
      TopicName: validSNS
  RESULTBUCKET:
    Type: 'AWS::S3::Bucket'
  RESULTBUCKET1:
    Type: 'AWS::S3::Bucket'
  CUSTOMLAMBDA:
    Type: 'AWS::CloudFormation::CustomResource'
    Properties:
      ServiceToken: !GetAtt
        - CREATELAMBDA
        - Arn
      S3BucketName: !Ref RESULTBUCKET1
      Urls:
        - 'https://github.com/RinoDinoRino/soldo_project/raw/master/lambdaZip/VINApiCall.zip'
        - 'https://github.com/RinoDinoRino/soldo_project/raw/master/lambdaZip/ValidateGenerateConvert.zip'
        - 'https://github.com/RinoDinoRino/soldo_project/raw/master/lambdaZip/textractCall.zip'
  CREATELAMBDA:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          import os
          import boto3
          import urllib.request
          import json
          import cfnresponse
          from urllib.parse import urlparse
          s3 = boto3.resource('s3')
          def save_to_local(url):
            urlPath = urlparse(url).path
            fileName = os.path.basename(urlPath)
            filePath = '/tmp/' + fileName
            urllib.request.urlretrieve(url, filePath)
            return filePath

          def upload_to_s3(filePath, bucket):
            fileName = os.path.basename(filePath)
            s3.Bucket(bucket).upload_file(filePath, fileName)

          def copy_to_s3(url, bucket):
            filePath = save_to_local(url)
            upload_to_s3(filePath, bucket)
          def lambda_handler(event, context):
            properties = event['ResourceProperties']
            urls = properties['Urls']
            bucket = properties['S3BucketName']
            try:
              for url in urls:
                print(url)
                copy_to_s3(url, bucket)

            except Exception as e:
              print(e)
              responseData = {}
              responseData['Data'] = "Failure"
              cfnresponse.send(event, context, cfnresponse.FAILED,responseData, "CustomResourcePhysicalID")
              return
            responseData = {}
            responseData['Data'] = "Success"
            cfnresponse.send(event, context, cfnresponse.SUCCESS,responseData, "CustomResourcePhysicalID")
      Description: upload lambda zips
      FunctionName: blog-uploadzips10
      Handler: index.lambda_handler
      Role: !GetAtt
        - AUTOPOLICYROLE
        - Arn
      Timeout: 180
      Runtime: python3.7

  POLICYTEXTRACT:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref RESULTBUCKET1
        S3Key: textractCall.zip
      Description: Calls textract
      FunctionName: autopolicy-textractcall
      Handler: autopolicy-textractcall.lambda_handler
      Role: !GetAtt AUTOPOLICYROLE.Arn
      Timeout: 120
      Runtime: python3.7

  VINAPICALL:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref RESULTBUCKET1
        S3Key: VINApiCall.zip
      Description: Calls the vin API
      FunctionName: autopolicy-apiCall
      Handler: autopolicy-APICall.lambda_handler
      Role: !GetAtt AUTOPOLICYROLE.Arn
      Timeout: 120
      Runtime: python3.7

  VALIDATECONVERT:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref RESULTBUCKET1
        S3Key: ValidateGenerateConvert.zip
      Description: validates info, generates qoute, convert file
      FunctionName: autopolocy-validate-convert
      Handler: autopolocy-validate-convert.lambda_handler
      Role: !GetAtt AUTOPOLICYROLE.Arn
      Timeout: 120
      Runtime: python3.7

  # S3CLOUDTRAIL: #TODO MIGHT BE BETTER TO DO IN UPDATE!!!!
  #   Type: AWS::CloudTrail::Trail
  #   Properties:
  #     CloudWatchLogsLogGroupArn: String
  #     CloudWatchLogsRoleArn: String
  #     EventSelectors:
  #       - DataResources:
  #           - Type: AWS::S3::PutObject
  #             Values: ##TODO
  #         ReadWriteType: WriteOnly
  #     IsLogging: true
  #     S3BucketName: !Ref RESULTBUCKET1
  #     TrailName: S3inputTrigger

  S3CLOUDWATCH:
    Type: AWS::Events::Rule
    Properties:
      Description: "Creates an alarm for s3 puts"
      EventPattern: |-
        {
            "source": [
              "aws.s3"
            ],
            "detail-type": [
              "AWS API Call via CloudTrail"
            ],
            "detail": {
              "eventSource": [
                "s3.amazonaws.com"
              ],
              "eventName": [
                "PutObject"
              ],
              "requestParameters": {
                "bucketName": [
                  "autopolicy-textract-oregon"
                ]
              }
            }
          }
      Name: S3cloudwatch
      State: "ENABLED"

  MyStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: AutoPolicyQuoteGenerator
      DefinitionSubstitutions:
        TextractLambda: !GetAtt POLICYTEXTRACT.Arn
        TextractDownSqs: !Ref TEXTRACTDOWNQUEUE
        ApiCallLambda: !GetAtt VINAPICALL.Arn
        ApiDownSqs: !Ref VINAPIDOWNQUEUE
        ValidateLambda: !GetAtt VALIDATECONVERT.Arn
        InvalidQueueURL: !Ref INVALIDQUEUE
        InvalidSNSTopic: !Ref INVALIDSNS
        ValidSNSTopic: !Ref VALIDSNS
      DefinitionString: |-
          {
            "Comment": "A Step Function that takes a policy document and generates a qoute",
            "StartAt": "S3_Uploaded",
            "States": {
              "S3_Uploaded": {
                "Type": "Pass",
                "Next": "textractLambda"
              },
              "textractLambda": {
                "Type": "Task",
                "Resource": "arn:aws:states:::lambda:invoke",
                "Parameters": {
                  "FunctionName": "${TextractLambda}",
                  "Payload.$": "$"
                },
                "ResultPath": "$.textract",
                "OutputPath": "$.textract.Payload",
                "Next": "Textract succeded, Sending to API",
                "Retry": [
                  {
                    "ErrorEquals": [
                      "STATES.ALL",
                      "STATES.TIMEOUT"
                    ],
                    "IntervalSeconds": 1,
                    "BackoffRate": 2,
                    "MaxAttempts": 2
                  }
                ],
                "Catch": [
                  {
                    "ErrorEquals": [
                      "States.ALL"
                    ],
                    "Next": "textractDownSQS"
                  }
                ]
              },
              "textractDownSQS": {
                "Type": "Task",
                "Resource": "arn:aws:states:::sqs:sendMessage",
                "Parameters": {
                  "QueueUrl": "${TextractDownSqs}",
                  "MessageBody": {
                    "Input": "Textract is down"
                  }
                },
                "End": true
              },
              "Textract succeded, Sending to API": {
                "Type": "Pass",
                "Next": "APIcall"
              },
              "APIcall": {
                "Type": "Task",
                "Resource": "arn:aws:states:::lambda:invoke",
                "Parameters": {
                  "FunctionName": "${ApiCallLambda}",
                  "Payload.$": "$"
                },
                "ResultPath": "$.APIoutput",
                "OutputPath": "$.APIoutput.Payload",
                "Next": "APIstatus",
                "Retry": [
                  {
                    "ErrorEquals": [
                      "STATES.ALL",
                      "STATES.TIMEOUT"
                    ],
                    "IntervalSeconds": 1,
                    "BackoffRate": 2,
                    "MaxAttempts": 2
                  }
                ],
                "Catch": [
                  {
                    "ErrorEquals": [
                      "States.ALL"
                    ],
                    "Next": "APIdownSQS"
                  }
                ]
              },
              "APIstatus": {
                "Type": "Choice",
                "Choices": [
                  {
                    "Variable": "$.APIstatusCode",
                    "NumericEquals": 200,
                    "Next": "Val_Gen_Convert"
                  }
                ],
                "Default": "APIdownSQS"
              },
              "APIdownSQS": {
                "Type": "Task",
                "Resource": "arn:aws:states:::sqs:sendMessage",
                "Parameters": {
                  "QueueUrl": "${ApiDownSqs}",
                  "MessageBody": {
                    "Input": "API is down"
                  }
                },
                "End": true
              },
              "Val_Gen_Convert": {
                "Type": "Task",
                "Resource": "arn:aws:states:::lambda:invoke",
                "Parameters": {
                  "FunctionName": "${ValidateLambda}",
                  "Payload.$": "$"
                },
                "ResultPath": "$.generated",
                "OutputPath": "$.generated.Payload",
                "Next": "ValidOrInvalid"
              },
              "ValidOrInvalid": {
                "Type": "Choice",
                "Choices": [
                  {
                    "Variable": "$.validity",
                    "NumericEquals": 0,
                    "Next": "invalidSQS"
                  }
                ],
                "Default": "validSNS"
              },
              "invalidSQS": {
                "Type": "Task",
                "Resource": "arn:aws:states:::sqs:sendMessage",
                "Parameters": {
                  "QueueUrl": "${InvalidQueueURL}",
                  "MessageBody": {
                    "Input.$": "$.sqsbody"
                  }
                },
                "ResultPath": "$.sqsbody",
                "Next": "invalidSNS"
              },
              "invalidSNS": {
                "Type": "Task",
                "Resource": "arn:aws:states:::sns:publish",
                "Parameters": {
                  "Message.$": "$.snsbody",
                  "TopicArn": "${InvalidSNSTopic}"
                },
                "End": true
              },
              "validSNS": {
                "Type": "Task",
                "Resource": "arn:aws:states:::sns:publish",
                "Parameters": {
                  "Message.$": "$.snsbody",
                  "TopicArn": "${ValidSNSTopic}"
                },
                "End": true
              }
            }
          }
      RoleArn: !GetAtt AUTOPOLICYROLE.Arn

Outputs:
  LambdaFunctionTextract:
    Description: Lambda Function to call Textract to extract tables and forms
    Value: !Ref POLICYTEXTRACT

  LambdaFunctionVinApi:
    Description: Lambda Function to call VIN API and populate JSON
    Value: !Ref VINAPICALL

  LambdaFunctionValidateConvert:
    Description: Lambda Function validate and convert
    Value: !Ref VALIDATECONVERT

  S3Bucket:
    Description: Bucket for input and Outputs
    Value: !Ref RESULTBUCKET
